<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-23T20:52:22+02:00</updated><id>http://localhost:4000/</id><title type="html">Mateusz Maciaszek</title><subtitle>This blog covers topics about many different computer science fields, mainly distributed and concurrent systems. Some day it will help me to escape from the simulation we live in (not sure how yet).
</subtitle><entry><title type="html">JustinDB - next COMPETITION</title><link href="http://localhost:4000/dsp2017/2017/05/20/justindb-next-competition.html" rel="alternate" type="text/html" title="JustinDB - next COMPETITION" /><published>2017-05-20T19:10:00+02:00</published><updated>2017-05-20T19:10:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/05/20/justindb-next-competition</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/05/20/justindb-next-competition.html">&lt;h2 id=&quot;blogpost-nr-20&quot;&gt;BLOGPOST NR 20&lt;/h2&gt;
&lt;p&gt;You may know that I‚Äôm taking a part in polish competition called &lt;a href=&quot;http://devstyle.pl/daj-sie-poznac/&quot;&gt;Get noticed!&lt;/a&gt; (read more &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/03/12/get-noticed.html&quot;&gt;here&lt;/a&gt; about it). It took more than 2 months since I wrote it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time flies so fast.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But I‚Äôm very happy and proud from myself. üòä I achieved my personal goal - to write 20 blogposts (mainly about &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt;). üíñ&lt;/p&gt;

&lt;h2 id=&quot;next-competition&quot;&gt;NEXT COMPETITION&lt;/h2&gt;
&lt;p&gt;I don‚Äôt know why but I love competitions. Recently I found a new possibility to move on with &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; to make it even more recognizable.&lt;/p&gt;

&lt;p&gt;I‚Äôm going to take a part in so called &lt;a href=&quot;https://chmurowisko.pl/konkurs-z-chmura/#disqus_thread&quot;&gt;‚ÄúKonkurs z chmurƒÖ‚Äù&lt;/a&gt; (ang. ‚ÄúContest with cloud‚Äù) which is organized by team from Chmurowisko and e24cloud (cloud provider). Subject of topic is very broad.&lt;/p&gt;

&lt;h4 id=&quot;step-1-build-something-in-e24cloud&quot;&gt;&lt;strong&gt;STEP 1&lt;/strong&gt;. Build ‚Äúsomething‚Äù in e24cloud&lt;/h4&gt;
&lt;p&gt;It can be anything even like installing Wordpress site on virtual machine there or some hybrid solution using e24cloud + AWS at the same time.&lt;/p&gt;

&lt;p&gt;My plan minimum is simple - &lt;strong&gt;Initializing Multiple Data Center Clusters on &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt;&lt;/strong&gt;.
I will use &lt;strong&gt;e24cloud&lt;/strong&gt; + &lt;strong&gt;AWS/Scaleway&lt;/strong&gt; public cloud providers.&lt;/p&gt;

&lt;p&gt;If everything will spin up correctly I will additionaly try to cover different data replication scenarios.
I will also try to see how &lt;strong&gt;network&lt;/strong&gt; failures affect on database stability (cluster forming), data consistency and behavior in case of &lt;strong&gt;Split Brain&lt;/strong&gt; happening.&lt;/p&gt;

&lt;h4 id=&quot;step-2-show-it-to-the-world&quot;&gt;&lt;strong&gt;STEP 2&lt;/strong&gt;. Show it to the world&lt;/h4&gt;

&lt;p&gt;Easly undestandable. Just write about your whole ‚Äújourney‚Äù on blog or record video.&lt;/p&gt;

&lt;h4 id=&quot;step-3-win&quot;&gt;&lt;strong&gt;STEP 3&lt;/strong&gt;. Win&lt;/h4&gt;
&lt;p&gt;Yeah! üëä&lt;/p&gt;</content><author><name></name></author><summary type="html">BLOGPOST NR 20 You may know that I‚Äôm taking a part in polish competition called Get noticed! (read more here about it). It took more than 2 months since I wrote it.</summary></entry><entry><title type="html">JustinDB - executable JAR</title><link href="http://localhost:4000/dsp2017/2017/05/20/justindb-executable-jar.html" rel="alternate" type="text/html" title="JustinDB - executable JAR" /><published>2017-05-20T14:10:00+02:00</published><updated>2017-05-20T14:10:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/05/20/justindb-executable-jar</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/05/20/justindb-executable-jar.html">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://speedcom.github.io/dsp2017/hacks/2017/03/28/iTermocil-divide-and-conquer-your-terminal.html&quot;&gt;‚ÄúiTermocil - divide and conquer your terminal like a PRO‚Äù&lt;/a&gt; blogpost I showed to you a way of running local &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; cluster (imitation). It runs &lt;a href=&quot;http://www.scala-sbt.org/&quot;&gt;sbt&lt;/a&gt; process under project catalog in different terminal panes. As this way was convenient in continous development I have had sometimes the feeling its simply too slow (a couple of parallely working sbt processes trying to crunch the same sources at the same time) and it would be better idea to run already having generated package.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Patience has its limits. Take it too far, and it's cowardice.
George Jackson
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;assembly&quot;&gt;Assembly&lt;/h2&gt;

&lt;p&gt;I‚Äôve finally decided to employ &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-assembly&lt;/code&gt; plugin. It creates a fat JAR of your project with all of its dependencies. üëä
Now simply by invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;sbt assembly&lt;/code&gt; command I am able to build new version of &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; JAR.
That way I‚Äôve got the possibility of running full standalone &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; instance in very fast way!&lt;/p&gt;

&lt;p&gt;Take a look at the pictures to see how I build exemplary &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; JAR and then form cluster on top of it (with passed appropriate parameters). Once JAR is built I‚Äôm running 3-node cluster (right side of terminal). Exemplary command to run single node is:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar -Djustin.node-id=0 -Djustin.http.port=9000 -Djustin.netty-tcp-port=2551 JustinDB-assembly-0.3.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;note&lt;/em&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;0.3&lt;/code&gt; is the current version of &lt;code class=&quot;highlighter-rouge&quot;&gt;JustinDB&lt;/code&gt; defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sbt&lt;/code&gt; file (that come from this name).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building&lt;/strong&gt;: üë∑
&lt;img src=&quot;../../../../../executable-jar-1.png&quot; alt=&quot;&quot; title=&quot;JustinDB build commands 1&quot; /&gt;
&lt;em&gt;JAR is building&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Note:
Built JAR is placed under target/scala-2.12 project catalog
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Running&lt;/strong&gt;: üö¥‚Äç
&lt;img src=&quot;../../../../../executable-jar-2.png&quot; alt=&quot;&quot; title=&quot;JustinDB build commands 2&quot; /&gt;
&lt;em&gt;On the right side you can see formed &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; cluster built on top of already generated JAR&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;You can try to download &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; sources from GitHub (official repository) and do it by yourself. That way you can start to play with it! üí™&lt;/p&gt;

&lt;p&gt;Seeing all this running processes make my heart beating faster. üíñ&lt;/p&gt;</content><author><name></name></author><summary type="html">Preface</summary></entry><entry><title type="html">JustinDB - solving data entropy: Active-Anti Entropy</title><link href="http://localhost:4000/dsp2017/2017/05/14/justindb-active-anti-entropy.html" rel="alternate" type="text/html" title="JustinDB - solving data entropy: Active-Anti Entropy" /><published>2017-05-14T10:10:00+02:00</published><updated>2017-05-14T10:10:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/05/14/justindb-active-anti-entropy</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/05/14/justindb-active-anti-entropy.html">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/05/13/justindb-read-repair.html&quot;&gt;previous&lt;/a&gt; post I wrote what data &lt;em&gt;entropy&lt;/em&gt; is and how &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; tries to solve it. I‚Äôve introduced to you also &lt;strong&gt;Read-Repair&lt;/strong&gt; technique and gave quick intro to todays hero - &lt;strong&gt;Active Anti-Entropy&lt;/strong&gt;. üí™&lt;/p&gt;

&lt;p&gt;We know that &lt;strong&gt;Read-Repair&lt;/strong&gt; is triggered on &lt;em&gt;read&lt;/em&gt; side, rather than a write. But what if read some data very rarely? It can be eventually be lost! To handle this and other threats to durability, &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; implements mentioned an anti-entorpy (replica synchronization) protocol to keep the replicas synchronized.&lt;/p&gt;

&lt;h2 id=&quot;active-anti-entropy-aae&quot;&gt;Active-Anti Entropy (AAE)&lt;/h2&gt;

&lt;p&gt;So &lt;strong&gt;AAE&lt;/strong&gt; is nothing more like a synchronization protocol to handling permanent failures. &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; supports it to proactively identify and repair inconsident data. This feature helps to recover data loss in the event of disk corruption or administrative error.&lt;/p&gt;

&lt;p&gt;To detect inconsistencies between replicas faster and to minimize the amount of transferred data, &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; uses &lt;a href=&quot;https://github.com/justin-db/JustinDB/tree/master/justin-merkle-trees/src&quot;&gt;&lt;strong&gt;Merkle Trees&lt;/strong&gt;&lt;/a&gt;. Its a sophisticated &lt;strong&gt;hash tree&lt;/strong&gt; which makes it easy to compare data sets between &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/05/06/justindb-ring.html&quot;&gt;&lt;strong&gt;vnodes&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;merkle-trees&quot;&gt;Merkle Trees&lt;/h2&gt;
&lt;p&gt;Merkle Trees is a hash tree where leafes are hashes of the values of individual keys. Parent nodes are hashes of their respective children.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Hash_Tree.svg/620px-Hash_Tree.svg.png&quot; alt=&quot;Image of Merkle Trees&quot; /&gt;&lt;/p&gt;

&lt;p&gt;They minimize the amount of data that needs to be transferred for synchronization.&lt;/p&gt;

&lt;p&gt;Each &lt;strong&gt;vnode&lt;/strong&gt; maintains a separate &lt;strong&gt;Merkle Tree&lt;/strong&gt; for each key range it hosts. If the hash values of the root of two trees are equal, then there is no point in doing synchronization since its meaning that leaf nodes are equal (replicas are the same). If not, it implies that the values of some replicas are different and they need to be synchronized.&lt;/p&gt;

&lt;p&gt;Since this process can be a bit expensive (think about existing many divergent replicas or just about profilactic checking of hashes throughout all cluster) its &lt;strong&gt;triggered manually&lt;/strong&gt; by database administrator (e.g every friday night). ‚úåÔ∏è&lt;/p&gt;</content><author><name></name></author><summary type="html">Preface In previous post I wrote what data entropy is and how JustinDB tries to solve it. I‚Äôve introduced to you also Read-Repair technique and gave quick intro to todays hero - Active Anti-Entropy. üí™</summary></entry><entry><title type="html">JustinDB - solving data entropy: Read Repair</title><link href="http://localhost:4000/dsp2017/2017/05/13/justindb-read-repair.html" rel="alternate" type="text/html" title="JustinDB - solving data entropy: Read Repair" /><published>2017-05-13T15:00:00+02:00</published><updated>2017-05-13T15:00:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/05/13/justindb-read-repair</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/05/13/justindb-read-repair.html">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; brings many techniques to achieve &lt;strong&gt;high availability&lt;/strong&gt; and &lt;strong&gt;duratibility&lt;/strong&gt; at the same time. To name few:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/05/06/justindb-ring.html&quot;&gt;&lt;strong&gt;The Ring&lt;/strong&gt;&lt;/a&gt; - &lt;strong&gt;Consistent Hashing&lt;/strong&gt; algorithm trying to distribute workload across all cluster evenly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/05/07/justindb-preference-list.html&quot;&gt;&lt;strong&gt;Preference list&lt;/strong&gt;&lt;/a&gt; - list of nodes responsible for storing/fetching particular data replica&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/04/13/justindb-replication-and-partitioning.html&quot;&gt;&lt;strong&gt;Replication and Partitioning&lt;/strong&gt;&lt;/a&gt; - creating multiple replicas of same data and splitting them across cluster nodes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/04/21/justindb-data-versioning.html&quot;&gt;&lt;strong&gt;Vector Clocks&lt;/strong&gt;&lt;/a&gt; - following made updates to every replica&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; states that is &lt;strong&gt;eventually consistent&lt;/strong&gt; database meaning that write will replicate to other nodes in time but there can be a bit of delay during which all nodes do not contain the same value. I‚Äôve already wrote about how an &lt;strong&gt;R/W&lt;/strong&gt; quorum can deal with differing values when write/read requests overlap at least one node. &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; has also a single strategy to address conflicting writes - &lt;strong&gt;Vector Clocks&lt;/strong&gt;. üëç&lt;/p&gt;

&lt;p&gt;All this difference between replicas in time is called &lt;em&gt;entropy&lt;/em&gt;. How to deal with it? ü§î&lt;/p&gt;

&lt;h2 id=&quot;data-entropy&quot;&gt;Data Entropy&lt;/h2&gt;
&lt;p&gt;Entropy is a byproduct of &lt;strong&gt;eventual consistency&lt;/strong&gt;.
&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; has created (or has plan to do) 2 &lt;em&gt;anti-entropy&lt;/em&gt; strategies:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Read Repair&lt;/strong&gt; (our todays hero)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Active Anti-Entropy&lt;/strong&gt; (I will write more about it in next post)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;read-repair&quot;&gt;Read Repair&lt;/h3&gt;

&lt;p&gt;As the name states this technique solves &lt;em&gt;entropy&lt;/em&gt; while reading data. When a successful read happens but not all replicas agree upon the value, &lt;em&gt;Read Repair&lt;/em&gt; is triggered. How &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; reason about agreement? With &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/04/21/justindb-data-versioning.html&quot;&gt;Vector Clocks&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;For example, we fetch data with ID=1 and R=3 (N is set to 3 also) - for some reason one of the fetched replica is considered to be ‚Äúolder‚Äù than rest. Once the final result could be easly deducted and returned to client behind the scene &lt;strong&gt;Read Repair&lt;/strong&gt; mechanism was fired of in asynchronous manner decided to update source node with old replica to the newest value.&lt;/p&gt;

&lt;p&gt;However, data which is never read can eventually be lost as nodes fail or/and are replaced. This is exactly where &lt;strong&gt;Active Anti-Entropy&lt;/strong&gt; comes to the party! ‚úåÔ∏è&lt;/p&gt;</content><author><name></name></author><summary type="html">Preface JustinDB brings many techniques to achieve high availability and duratibility at the same time. To name few: The Ring - Consistent Hashing algorithm trying to distribute workload across all cluster evenly Preference list - list of nodes responsible for storing/fetching particular data replica Replication and Partitioning - creating multiple replicas of same data and splitting them across cluster nodes Vector Clocks - following made updates to every replica</summary></entry><entry><title type="html">JustinDB - Preference list</title><link href="http://localhost:4000/dsp2017/2017/05/07/justindb-preference-list.html" rel="alternate" type="text/html" title="JustinDB - Preference list" /><published>2017-05-07T23:00:00+02:00</published><updated>2017-05-07T23:00:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/05/07/justindb-preference-list</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/05/07/justindb-preference-list.html">&lt;h2 id=&quot;preference-list&quot;&gt;Preference List&lt;/h2&gt;
&lt;p&gt;As you might read &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/04/13/justindb-replication-and-partitioning.html&quot;&gt;here&lt;/a&gt; &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; replicates its data on multiple hosts in order to achieve high availability and durability. Each data is replicated at &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; host (this term is also called &lt;code class=&quot;highlighter-rouge&quot;&gt;Replication Factor&lt;/code&gt;). Each key is assigned to a &lt;strong&gt;coordinator node&lt;/strong&gt; (a node handling a read or write operation). The coordinator is in charge of the replication of the data items that fall within its range. In addition to locally storing each key within its range, the coordinator replicates these keys at the N-1 clockwise successor nodes in the &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/05/06/justindb-ring.html&quot;&gt;Ring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The list of nodes that is responsible for storing a particular value is called a &lt;strong&gt;preference list&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is the way JustinDB represents preference list from code perspective. üëç&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PreferenceList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primaryNodeId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NodeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replicasNodeId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NodeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NodeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primaryNodeId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replicasNodeId&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;PrimaryNodeId is an Id of a coordinator node&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you are interested more about code you can start exploring &lt;a href=&quot;https://github.com/justin-db/JustinDB/blob/master/justin-core/src/main/scala/justin/db/replica/PreferenceList.scala&quot;&gt;here&lt;/a&gt;. üí™&lt;/p&gt;</content><author><name></name></author><summary type="html">Preference List As you might read here JustinDB replicates its data on multiple hosts in order to achieve high availability and durability. Each data is replicated at N host (this term is also called Replication Factor). Each key is assigned to a coordinator node (a node handling a read or write operation). The coordinator is in charge of the replication of the data items that fall within its range. In addition to locally storing each key within its range, the coordinator replicates these keys at the N-1 clockwise successor nodes in the Ring.</summary></entry><entry><title type="html">JustinDB - The Ring</title><link href="http://localhost:4000/dsp2017/2017/05/06/justindb-ring.html" rel="alternate" type="text/html" title="JustinDB - The Ring" /><published>2017-05-06T19:00:00+02:00</published><updated>2017-05-06T19:00:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/05/06/justindb-ring</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/05/06/justindb-ring.html">&lt;h2 id=&quot;the-ring&quot;&gt;The Ring&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; applies modified version of &lt;strong&gt;Consistent Hashing&lt;/strong&gt; to map objects along the edge of a circle (the ring).&lt;/p&gt;

&lt;p&gt;Just to recall &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; is a key-value database so you can think about it as a &lt;em&gt;big distributed hashtable&lt;/em&gt;.
Every signle data we save is identifiable in the system by its key (&lt;em&gt;UUID&lt;/em&gt; actually).&lt;/p&gt;

&lt;p&gt;But how exactly &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; know what node is responsible for handling request (storing/fetching value)? This is where already mentioned &lt;strong&gt;Consistent Hashing&lt;/strong&gt; algorithm take place. üëç&lt;/p&gt;

&lt;h2 id=&quot;consistent-hashing&quot;&gt;Consistent Hashing&lt;/h2&gt;
&lt;p&gt;Let visualise cluster of 5 nodes size. This is our space we can cover with data. &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; employs such algorithm to uniform data distribution. This space is divided into equal partitions called &lt;strong&gt;‚Äúvnodes‚Äù&lt;/strong&gt;. These vnodes are evenly distributed amongst participating physical nodes in the cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; uses very simplistic version of mapping data UUID key to particular vnode.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID2RingPartitionId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RingPartitionId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ring&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RingPartitionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Participating nodes in a &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; cluster are homogeneous - every node in the cluster knows where data should reside within the cluster. Requests for data can target any node. It will horizontally access data from the proper nodes, and return the result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ring&lt;/strong&gt; is represented as a wrapper around Map datastructure that know what &lt;strong&gt;vnode&lt;/strong&gt; (other name: ring‚Äôs partitionId) belongs to which cluster node.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ring&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;RingPartitionId&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;NodeId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can find these snippets &lt;a href=&quot;https://github.com/justin-db/JustinDB/tree/master/justin-consistent-hashing/src/main/scala/justin/consistent_hashing&quot;&gt;here&lt;/a&gt;. üí™&lt;/p&gt;</content><author><name></name></author><summary type="html">The Ring</summary></entry><entry><title type="html">JustinDB - HTTP API</title><link href="http://localhost:4000/dsp2017/2017/04/30/justindb-http-api.html" rel="alternate" type="text/html" title="JustinDB - HTTP API" /><published>2017-04-30T15:30:00+02:00</published><updated>2017-04-30T15:30:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/04/30/justindb-http-api</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/04/30/justindb-http-api.html">&lt;h2 id=&quot;how-to-talk-to-justindb&quot;&gt;How to talk to JustinDB&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; its a key/value store - you associate valeus with keys, and retrieve whem using the same keys. This means that basic commands are setting and getting values.&lt;/p&gt;

&lt;p&gt;As I wrote in &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/03/14/justindb-modern-reactive-nosql-database.html&quot;&gt;‚ÄúJustinDB - Modern REACTIVE NoSQL database‚Äù&lt;/a&gt; one possibility to talk with &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; is &lt;strong&gt;HTTP protocol&lt;/strong&gt;. The actions are currently related to HTTP methods (GET, PUT).&lt;/p&gt;

&lt;h3 id=&quot;get&quot;&gt;&lt;strong&gt;GET&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Its very simple form of read, responding with only the value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /get?id={UUID}&amp;amp;r={r}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; is the number of nodes read from before returning&lt;/p&gt;

&lt;h3 id=&quot;put&quot;&gt;&lt;strong&gt;PUT&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The simplest write command in Riak is putting a value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT /put body: { w: Int, value: Array[Byte], vectorClock: Base64 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; is the number of nodes written to before considered successful.
&lt;code class=&quot;highlighter-rouge&quot;&gt;vectorClock&lt;/code&gt; is the mechanism for partial ordering of values in &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt;. You can read more about this mechanism &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/04/21/justindb-data-versioning.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers! ‚úåÔ∏è&lt;/p&gt;</content><author><name></name></author><summary type="html">How to talk to JustinDB JustinDB its a key/value store - you associate valeus with keys, and retrieve whem using the same keys. This means that basic commands are setting and getting values.</summary></entry><entry><title type="html">Streaming Databases - the future</title><link href="http://localhost:4000/dsp2017/2017/04/29/streaming-databases-future.html" rel="alternate" type="text/html" title="Streaming Databases - the future" /><published>2017-04-29T16:20:00+02:00</published><updated>2017-04-29T16:20:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/04/29/streaming-databases-future</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/04/29/streaming-databases-future.html">&lt;h2 id=&quot;streaming-world&quot;&gt;Streaming World&lt;/h2&gt;

&lt;p&gt;We live in the world where &lt;strong&gt;streaming&lt;/strong&gt; has started to be a serious part of building distributed applications. In this ecosystem we face a lot of innovation at open source including such frameworks like &lt;em&gt;Apache Spark/Storm/Flink&lt;/em&gt;, &lt;em&gt;Kafka/Samza&lt;/em&gt; or proprietary services such &lt;em&gt;AWS Lambda&lt;/em&gt; and &lt;em&gt;Google‚Äôs DataFlow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Every single serious application needs some kind of data storage in order to store results and get them back later.
Thought, there is one thing that seems to be very constant at this field - &lt;strong&gt;MONOPOL of RDBMs&lt;/strong&gt; (&lt;em&gt;Relational Database Management Systems&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;In typical software developer mindset these solutions seems to exists as the only one even though they often do not fit to application requirements! ü§∑&lt;/p&gt;

&lt;p&gt;In this artcile I‚Äôm going to cover a little bit different model - streaming database. Ever hear about such?&lt;/p&gt;

&lt;h2 id=&quot;data-stream-management-system-dsms-Ô∏è&quot;&gt;Data Stream Management System (DSMS) üïµÔ∏è‚Äç&lt;/h2&gt;

&lt;p&gt;In typical RDBMs we load needed data which are stored in atomic transactional way and after than perform some subsequent queries to analyze what we want.&lt;/p&gt;

&lt;p&gt;However, try to imagine the class of applications which have to deal with constant contiguous load of new data and do analysis of whem in time they arrive to system. Once the result is computed we present it in real time (also incrementaly storing in table/archive). Financial systems, network monitoring, server logs monitoring, traffic intensity and many more - systems with &lt;strong&gt;massive load&lt;/strong&gt;. Minimalization of latency is crucial here and relying on RDBM system can lead to serious bottlenecks.&lt;/p&gt;

&lt;p&gt;Contigous, dynamic, changing over time set of new data - this is what we call &lt;strong&gt;STREAM&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First term is coined. Next one that goes in pair is &lt;strong&gt;Continuous Queries&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;stream-model-and-continuous-queries&quot;&gt;STREAM model and Continuous Queries&lt;/h3&gt;

&lt;p&gt;So how exactly such databases work?&lt;/p&gt;

&lt;p&gt;Continuous queries expect to working until they are deleted from system on coming contiguous stream of data (potentially ifinit). They do its work every single time new data arrives to system (not when client make requests). Client simply register itself and listen for generated results on the fly.&lt;/p&gt;

&lt;h3 id=&quot;current-projects&quot;&gt;Current projects&lt;/h3&gt;

&lt;p&gt;Most of them are done by Academia world but either are no longer supported or were just a playground for new ideas. I‚Äôm a fan of promising &lt;a href=&quot;https://www.pipelinedb.com/&quot;&gt;PipelineDB&lt;/a&gt; which is an extension of Postgres database adding &lt;em&gt;CQL&lt;/em&gt; (continous query language; extension of SQL) for handling streaming data. Worth to mention is also &lt;a href=&quot;https://www.confluent.io/blog/introducing-kafka-streams-stream-processing-made-simple/&quot;&gt;Kafka Streams&lt;/a&gt; which is build on top of Kafka distributed queue.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Streaming programming is getting more and more attention. However, from perspective of databases its still something new and not very popular as it should be - lack of comercialization and too much pinned on RDBMs in typical developers mindset. ü¶Ñ&lt;/p&gt;</content><author><name></name></author><summary type="html">Streaming World</summary></entry><entry><title type="html">Get noticed - first summing up</title><link href="http://localhost:4000/dsp2017/2017/04/22/get-noticed-first-summing-up.html" rel="alternate" type="text/html" title="Get noticed - first summing up" /><published>2017-04-22T13:20:00+02:00</published><updated>2017-04-22T13:20:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/04/22/get-noticed-first-summing-up</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/04/22/get-noticed-first-summing-up.html">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;It passed more than one month since I wrote my first blogpost during &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/03/12/get-noticed.html&quot;&gt;‚ÄúGet noticed‚Äù&lt;/a&gt; competition.
I‚Äôve decided to write quick recap for myself and others to hear what I‚Äôve achieved during this time.&lt;/p&gt;

&lt;p&gt;Lets start! üí™&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; database is getting more and more popular. It‚Äôs open sourced project so everyone can see how exactly it‚Äôs build and looks like (its hosted on GitHub).&lt;/p&gt;

&lt;p&gt;As of today, &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; has:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;9 watchers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;35 stars&lt;/strong&gt; (my goal is to have at least &lt;strong&gt;100&lt;/strong&gt;!)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5 forks&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like these stats and they mean a lot of to me!&lt;/p&gt;

&lt;p&gt;Most of the time I share with new blogposts via LinkedIn platform on dedicated Scala enthusiasts group. I think that I should start considering such services as Twitter and Reddit to get more attention.&lt;/p&gt;

&lt;p&gt;Whats more, &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; project crossed &lt;strong&gt;800 commits&lt;/strong&gt;! üëç
Its code coverage get more than &lt;strong&gt;80%&lt;/strong&gt; (now its around 86%). Thats relatively very good result. Current tests only help me to make this project better and doesn‚Äôt slow down the whole development process.&lt;/p&gt;

&lt;p&gt;In the next couple of months I‚Äôm going to focus more on &lt;strong&gt;PHYSICAL MODEL&lt;/strong&gt; - how exactly to store data indefinitely, what algorithms and data structures to use, how to exploit parallel architecture, talk effectively to disk and be CPU cache friendly at the same time (and so on and on).&lt;/p&gt;

&lt;p&gt;Last but not least, even this blog has getting more attention! üíï Big surprise to me!&lt;/p&gt;

&lt;p&gt;Whole this time was very productive for me but you can‚Äôt simply forget that working on the project and trying to write at least 2 posts every week is not that easy at first glance as you might think of.&lt;/p&gt;

&lt;p&gt;I‚Äôve very happy! Cheers! ‚úåÔ∏è&lt;/p&gt;</content><author><name></name></author><summary type="html">Summary It passed more than one month since I wrote my first blogpost during ‚ÄúGet noticed‚Äù competition. I‚Äôve decided to write quick recap for myself and others to hear what I‚Äôve achieved during this time.</summary></entry><entry><title type="html">JustinDB - data versioning: Vector Clocks</title><link href="http://localhost:4000/dsp2017/2017/04/21/justindb-data-versioning.html" rel="alternate" type="text/html" title="JustinDB - data versioning: Vector Clocks" /><published>2017-04-21T10:20:00+02:00</published><updated>2017-04-21T10:20:00+02:00</updated><id>http://localhost:4000/dsp2017/2017/04/21/justindb-data-versioning</id><content type="html" xml:base="http://localhost:4000/dsp2017/2017/04/21/justindb-data-versioning.html">&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; provides &lt;strong&gt;eventual consistency&lt;/strong&gt;, which allows for updates to be propagated to all replicas &lt;strong&gt;asynchronously&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; has a &lt;strong&gt;tunable availability&lt;/strong&gt; characteristic. It is highly available to serve requests, with the ability to tune its level of availability‚Äìnearing, but never quite reaching, strong consistency. As you may have read previous post about &lt;a href=&quot;http://speedcom.github.io/dsp2017/2017/04/13/justindb-replication-and-partitioning.html&quot;&gt;replication&lt;/a&gt; you know that every data is replicated to N distinct physical nodes (servers). Besides that it allows you to decide how many nodes must be written to or read from per request. These values are settings labeled &lt;strong&gt;N&lt;/strong&gt; (the number of nodes to replicate to), &lt;strong&gt;R&lt;/strong&gt; (the number of nodes read from before returning), and &lt;strong&gt;W&lt;/strong&gt; (the number of nodes written to before considered successful).&lt;/p&gt;

&lt;p&gt;Under certain failure scenarios (e.g. network partitions), updates may not arrive at all replicas for an extended period of time. Its worth to notice that updates in the presence of e.g. node failures can potentially result in an object having distinct version sub-histories, which the system will need to reconcile in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; uses &lt;strong&gt;Vector Clock&lt;/strong&gt; in order to capture causality between different versions of the same object.&lt;/p&gt;

&lt;h2 id=&quot;vector-clock&quot;&gt;Vector Clock&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Vector_clock&quot;&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A vector clock is an algorithm for generating a partial ordering of events in a distributed system and detecting causality violations.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Sounds a bit confusing.&lt;/p&gt;

&lt;p&gt;At it basis, Vector Clock just measures a sequence of events and keep a running history of updates.
Its effectively a list of (node, counter) pairs. One vector clock is associated with every version of every objects.&lt;/p&gt;

&lt;p&gt;This is how Vector Clock is modeled in &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchedCounter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedCounter&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;searchedCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOne&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updatedCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toList&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toSet&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VectorClock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiverId&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergedClocks&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergedCounter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vc1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiverId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiverId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter2&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                     &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergedCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOne&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;VectorClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mergedClocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiverId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnyVal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addOne&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;lets-illustrate-vector-clocks-in-action&quot;&gt;Lets illustrate vector clocks in action&lt;/h4&gt;
&lt;p&gt;Quick reminder: &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; at it basis can thought be as a typical &lt;code class=&quot;highlighter-rouge&quot;&gt;key -&amp;gt; value&lt;/code&gt; data structure.&lt;/p&gt;

&lt;p&gt;We have 3 actors in our system: Luke, Han Solo and Leia.
They try to order the food.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Luke has decided to order sushi. Vector Clock now contains his name and the number of updates he‚Äôs performed.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;key: food

vclock: {Luke: 1}
value: sushi

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Han Solo has got a message about an order but he doesn‚Äôt like Luke decision. He decided to &lt;em&gt;update&lt;/em&gt; the order to take
spaghetti instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;key: food

vclock: {Luke: 1, Han Solo: 1}
value: spaghetti
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;At the sime time as Han Solo, Leia comes along. She decides that &lt;em&gt;sushi&lt;/em&gt; is a good idea (author: c‚Äômon, it always is!) but she prefers to eat &lt;em&gt;ramen&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;key: food

vclock: {Luke: 1, Leia: 1}
value: ramen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We got a problem. Now we have two distinct vector clocks in play that diverge from &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Luke:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; store both values.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Later in the day Han Solo checks again, but this time he gets two conflicts values, with two vector clocks.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;key: food

vclock: {Luke: 1, Leia: 1}
value: ramen
--
vclock: {Luke: 1, Han Solo: 1}
value: spaghetti
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Han Solo tries to solve this problem. He actually knows that Leia is a big fun of ramen so he decided to resolves the conflict choosing her option and providing new vector clock (sorry Luke‚Ä¶).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;key: food

vclock: {Luke: 1, Leia: 1, Han Solo: 2}
value: ramen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Now every subsequent request for &lt;em&gt;food&lt;/em&gt; key will just return the agreed upon &lt;em&gt;ramen&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this part about Vector Clock we learned:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;what is it actually&lt;/li&gt;
  &lt;li&gt;why do we need such technique in distributed system with enabled replication&lt;/li&gt;
  &lt;li&gt;how to use it in real world&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In next part I‚Äôm going to show how actually we use Vector Clock with &lt;a href=&quot;https://github.com/speedcom/JustinDB&quot;&gt;JustinDB&lt;/a&gt; &lt;strong&gt;API&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;how Vector Clocks are generated for every stored objects&lt;/li&gt;
  &lt;li&gt;how to update particular object&lt;/li&gt;
  &lt;li&gt;how to update conflicted versions&lt;/li&gt;
  &lt;li&gt;how system reason about causality of conflicted versions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheers! ‚úåÔ∏è&lt;/p&gt;</content><author><name></name></author><summary type="html">Preface JustinDB provides eventual consistency, which allows for updates to be propagated to all replicas asynchronously.</summary></entry></feed>